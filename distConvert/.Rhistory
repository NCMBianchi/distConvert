n2 <- table(y)[2]
# Chunk 20
set.seed (1)
B <- 10000
Tbs <- rep(NA, B)
for (b in 1:B) {
dat<-sample(c(x[y=="II", 11], x[y=="IV", 11]))
Tbs[b]<-t.test(dat[1:n1], dat[(n1 + 1):(n1 + n2)],
var.equal = TRUE
)$statistic
}
p.value.resample <- mean ((abs(Tbs) >= abs(TT)))
p.value.resample
# Chunk 21
par(mfrow=c(1,1))
hist(Tbs , breaks = 100, xlim = c(-4.2, 4.2), main = "",
xlab = "Null Distribution of Test Statistic", col = 7)
lines(seq(-4.2, 4.2, len = 1000),
dt(seq(-4.2, 4.2, len = 1000),
df = (n1 + n2 - 2)
) * 1000, col = 2, lwd = 3)
abline(v = TT, col = 4, lwd = 2)
text(TT + 0.5, 350, paste("T = ", round(TT, 4), sep = ""),
col = 4)
title("11th gene")
legend("topright",legend="Theoretical null distribution",lty=1,col=2,lwd=2,)
# Chunk 22
par(mfrow=c(2,2))
hist(x[y=="II", 877], prob=T, main = 'Histogram of expression of gene 877th\n in tumors of class II',xlab="",breaks = 4)
hist(x[y=="IV", 877], prob=T, main = 'Histogram of expression of gene 877th\n in tumors of class IV',xlab="",breaks = 4)
boxplot(x[y=="II", 877],  main = 'Boxplot of expression of gene 877th\n in tumors of class II',ylab="")
boxplot(x[y=="IV", 877],  main = 'Boxplot of expression of gene 877th\n in tumors of class IV',ylab="")
par(mfrow=c(1,1))
# Chunk 23
t.877 <- t.test(x[y=="II", 877], x[y=="IV", 877],var.equal = T)
TT <- t.877$statistic
TT
t.877$p.value
# Chunk 24
set.seed (1)
B <- 10000
Tbs <- rep(NA, B)
for (b in 1:B) {
dat<-sample(c(x[y=="II", 877], x[y=="IV", 877]))
Tbs[b]<-t.test(dat[1:n1], dat[(n1 + 1):(n1 + n2)],
var.equal = TRUE
)$statistic
}
p.value.resample <- mean ((abs(Tbs) >= abs(TT)))
p.value.resample
# Chunk 25
par(mfrow=c(1,1))
hist(Tbs , breaks = 100, xlim = c(-4.2, 4.2), main = "",
xlab = "Null Distribution of Test Statistic", col = 7,ylim = c(0,400))
lines(seq(-4.2, 4.2, len = 1000),
dt(seq(-4.2, 4.2, len = 1000),
df = (n1 + n2 - 2)
) * 1000, col = 2, lwd = 3)
abline(v = TT, col = 4, lwd = 2)
text(TT + 0.5, 350, paste("T = ", round(TT, 4), sep = ""),
col = 4)
title("877th gene")
legend("topright",legend="Theoretical null distribution",lty=1,col=2,lwd=2)
# Chunk 26
m <-100# number of genes to consider
B <- 10000
set.seed (1)
index <- sample(ncol(x), m)
Ts <- rep(NA, m)
Ts.star <- matrix(NA, ncol = m, nrow = B)
for (j in 1:m) {
k <- index[j]
Ts[j] <- t.test(x[y=="II", k], x[y=="IV", k],
var.equal = TRUE
)$statistic
for (b in 1:B) {
dat <- sample(c(x[y=="II", k], x[y=="IV", k]))
Ts.star [b, j] <- t.test(dat[1:n1],
dat[(n1 + 1):(n1 + n2)], var.equal = TRUE
)$statistic
}
}
# Chunk 27
cs <- sort(abs(Ts))
FDRs <- Rs <- Vs <- rep(NA, m)
for (j in 1:m) {
R <- sum(abs(Ts) >= cs[j])
V <- sum(abs(Ts.star) >= cs[j]) / B
Rs[j] <- R
Vs[j] <- V
FDRs[j] <- V / R
}
# Chunk 28
max(Rs[FDRs <= .1])
max(Rs[FDRs <= .2])
# Chunk 29
plot(Rs , FDRs , xlab = "Number of Rejections", type = "l",
ylab = "False Discovery Rate", col = 4, lwd = 3)
# Chunk 30
p.values.resample <- lapply(1:m,function(j)mean(abs(Ts.star[,j])>=abs(Ts[j])))
p.values.resampleBH <- p.adjust(p.values.resample,method = "BH")
# Chunk 31
RsBH <- length(FDRs)
for (j in 1:length(FDRs)){
RsBH[j] <- sum(p.values.resampleBH<=FDRs[j])
}
plot(Rs , FDRs , xlab = "Number of Rejections", type = "l",
ylab = "False Discovery Rate", col = 4, lwd = 3)
lines(RsBH,FDRs,col="orange",lwd=3,lty=2)
legend("topright",legend=c("plug-in re-sampling FDR","re-sampling BH"),lty=c(1,2),col=c("4","orange"),lwd=2)
# Chunk 32
p.values_unadj <- rep(NA,m)
p.value_BH<- rep(NA,m)
for (i in 1:m){
p.values_unadj[i] <- t.test(x[y=="II",index[i]],x[y=="IV",index[i]],alternative="two.sided",var.equal = T)$p.value
}
p.value_BH<- p.adjust(p.values_unadj,method = "BH")
# Chunk 33
FDR <- seq(0,1,by=0.01)
RBH <- length(FDR)
for (j in 1:length(FDR)){
RBH[j] <- sum(p.value_BH<=FDR[j])
}
plot(Rs , FDRs , xlab = "Number of Rejections", type = "l",
ylab = "False Discovery Rate", col = 4, lwd = 3)
lines(RBH,FDR,col=2,lwd=3)
legend("topright",legend=c("re-sampling FDR","t-test FDR"),lty=1,col=c(4,2),lwd=2)
# Chunk 34
p.values_unadj <- rep(NA,m)
p.value_BH<- rep(NA,m)
for (i in 1:m){
p.values_unadj[i] <- wilcox.test(x[y=="II",index[i]],x[y=="IV",index[i]],alternative="two.sided",paired = F,exact = F)$p.value
}
p.value_BH<- p.adjust(p.values_unadj,method = "BH")
RBH <- length(FDR)
for (j in 1:length(FDR)){
RBH[j] <- sum(p.value_BH<=FDR[j])
}
plot(Rs , FDRs , xlab = "Number of Rejections", type = "l",
ylab = "False Discovery Rate", col = 4, lwd = 3)
lines(RBH,FDR,col=2,lwd=3)
legend("topright",legend=c("re-sampling FDR","Mann-Whitney FDR"),lty=1,col=c(4,2),lwd=2)
# Chunk 35
wilcox.test(x[y=="II", 11], x[y=="IV", 11],paired = F)
# Chunk 36
wilcox.test(x[y=="II", 877], x[y=="IV", 877],paired = F)
RsBH <- length(FDRs)
for (j in 1:length(FDRs)){
RsBH[j] <- sum(p.values.resampleBH<=FDRs[j])
}
plot(Rs , FDRs , xlab = "Number of Rejections", type = "l",
ylab = "False Discovery Rate", col = 4, lwd = 3)
lines(RsBH,FDRs,col="orange",lwd=3,lty=2)
legend("topright",legend=c("plug-in re-sampling FDR","re-sampling BH"),lty=c(1,2),col=c("4","orange"),lwd=2)
par(mfrow=c(1,1))
hist(Tbs , breaks = 100, xlim = c(-4.2, 4.2), main = "",
xlab = "Null Distribution of Test Statistic", col = 7,ylim = c(0,400))
lines(seq(-4.2, 4.2, len = 1000),
dt(seq(-4.2, 4.2, len = 1000),
df = (n1 + n2 - 2)
) * 1000, col = 2, lwd = 3)
abline(v = TT, col = 4, lwd = 2)
text(TT + 0.5, 350, paste("T = ", round(TT, 4), sep = ""),
col = 4)
title("877th gene")
legend("topright",legend="Theoretical null distribution",lty=1,col=2,lwd=2)
FDR <- seq(0,1,by=0.01)
RBH <- length(FDR)
for (j in 1:length(FDR)){
RBH[j] <- sum(p.value_BH<=FDR[j])
}
plot(Rs , FDRs , xlab = "Number of Rejections", type = "l",
ylab = "False Discovery Rate", col = 4, lwd = 3)
lines(RBH,FDR,col=2,lwd=3)
legend("topright",legend=c("re-sampling FDR","t-test FDR"),lty=1,col=c(4,2),lwd=2)
install.packages("tidyverse")
installed.packages()
installed.packages("tidyverse")
install.packages("tidyverse")
summary(fit_KM)
head(aml)
library(survival)
library(survminer)
aml
head(aml,3)
Surv(aml$time,aml$status)
fit_KM <- survfit(Surv(time,status)~1,data=aml)
summary(fit_KM)
survminer::ggsurvplot(fit_KM)
fit_KM_by_x <- survfit(Surv(time,status)~x,data=aml)
survminer::ggsurvplot(fit_KM_by_x,conf.int=TRUE)
fit_log_rank <- survdiff(Surv(time,status)~x,data=aml)
## The function above returns a contingency table between expected and observed
## values against maintained and non-maintained values, as well as degrees of
## freedom and chi squared - with the corresponding probability.
survminer::ggsurvplot(fit_log_rank,conf.int=TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
## to make a sequence with a given start, stop and step
intro_seq <- seq(2,97,6)
## to make a random sequence of n numbers
# if not specified (mu=0,sd=1)
intro_rand <- rnorm(25,5,13)
is.numeric(intro_seq)
x_na <- NA
x_nan <- NaN
x_null <- NULL
!5
!0
## several functions can be used to check the data type
is.numeric(intro_seq)
is.character("Hallo welt!")
is.logical(FALSE)
is.infinite(2)
is.finite(Inf)
is.function(rnorm)
is.na(x_na)
is.nan(x_nan)
is.na(x_nan)
intro_rand > 30
intro_rand > 3
sum(intro_rand > 3)
len(intro_rand)
length(intro_rand)
sum(intro_rand > 3)
intro_seq[x > 3][x[x != 3] > 1]
intro_seq[intro_seq > 3][intro_seq[intro_seq != 3] > 1]
intro_rand[-(3:7)]
intro_rand[-(3:7)]
length(intro_rand[-(3:7)])
intro_vector <- c(127,321,354,764)
names(x) <- c("A","C","G","T")
intro_vector <- c(127,321,354,764)
names(intro_vector) <- c("A","C","G","T")
x_na <- NA
x_nan <- NaN
x_null <- NULL
!5
!0
intro_vector
intro_vector[c("C","G")]
intro_factor <- factor(c(1,2,3,1,2,1), levels=1:4)
na_matrix <- matrix(nrow=3,ncol=4)
intro_matrix <- matrix(1:12,nrow=3,ncol=4)
intro_matrix <- matrix(1:12,nrow=3,ncol=4)
rownames(intro_matrix) <- c("r1","r2","r3")
colnames(intro_matrix) <- c("c1","c2","c3","c4")
intro_matrix
intro_matrix[1:2,c("c1","c4")]
matrix(1:12,nrow=3,ncol=4,byrow=TRUE)
idvec <- c(1001,1002,1032,1321)
agevec <- c(46,62,71,55)
typevec <- c("melanoma","glioma","neuroblastoma","glioma")
stagevec <- c(3,4,2,3)
metasvec <- c(TRUE,FALSE,FALSE,FALSE)
patients <- data.frame(patient=idvec,age=agevec,
type=typevec,stage=stagevec,
metastases=metasvec)
rm(idvec,agevec,typevec,stagevec,metasvec)
patients
patients$age
class(patients$type)
patients$stage <- NULL
patients
dim(patients)
patients[order(patients$age),]
ordered_patients <- patients[order(patients$age),]
ordered_patients
library(survival)
aml
fit_cox <- coxph(Surv(time,status)~x,data = aml)
summary(fit_cox)
library(survival)
library(survminer)
aml
fit_cox <- coxph(Surv(time,status)~x,data = aml)
summary(fit_cox)
## The resulting "coef"0.9155 value is 'beta-hat' in the Cox formula and this
## means that since the hazard ratio "exp(coef)" is higher than 1, then the
ggsurvplot(survfit(Surv(time,status)~x,data=aml))
ggsurvplot(survfit(Surv(time,status)~x,data=aml,conf.int=TRUE))
survminer::ggsurvplot(fit_cox,conf.int=TRUE)
library(survival)
library(survminer)
aml
survminer::ggsurvplot(fit_cox,conf.int=TRUE)
ggsurvplot(survfit(Surv(time,status)~x,data=aml))
patients <- data.frame(patient=idvec, age=agevec,
type=typevec, stage=stagevec,
metastases=metasvec)
idvec <- c(1001, 1002, 1032, 1321)
agevec <- c(46, 62, 71, 55)
typevec <- c("melanoma", "glioma", "neuroblastoma", "glioma")
stagevec <- c(3, 4, 2, 3)
metasvec <- c(TRUE, FALSE, FALSE, FALSE)
patients <- data.frame(patient=idvec, age=agevec,
type=typevec, stage=stagevec,
metastases=metasvec)
class(patients)
class(patients)
patients$type <- NULL
patients
as.matrix(patients)
class(as.matrix(patients))
class(patients[1,1])
class(as.matrix(patients[1,1]))
class(as.matrix(patients[1,1]))
as.matrix(patients[1,1])
rm(list=ls())
idvec <- c(1001, 1002, 1032, 1321)
agevec <- c(46, 62, 71, 55)
typevec <- c("melanoma", "glioma", "neuroblastoma", "glioma")
stagevec <- c(3, 4, 2, 3)
metasvec <- c(TRUE, FALSE, FALSE, FALSE)
patients <- data.frame(patient=idvec, age=agevec,
type=typevec, stage=stagevec,
metastases=metasvec)
class(patients)
class(patients[1,1])
patients$type <- NULL
patients
class(as.matrix(patients))
as.matrix(patients[1,1])
class(as.matrix(patients[1,1]))
## EXERCISE 14
# Create the list mylist from the lecture (or any other list)
# - Try to better understand the difference between
#   > mylist[1]    and    > mylist[[1]]
# Use the command “class” to figure out what exactly you get back from these two ways of addressing list elements!
patient_list <- c(matrix(1:12, nrow=3, ncol=4),patients)
## EXERCISE 14
# Create the list mylist from the lecture (or any other list)
# - Try to better understand the difference between
#   > mylist[1]    and    > mylist[[1]]
# Use the command “class” to figure out what exactly you get back from these two ways of addressing list elements!
patient_list <- list(matrix(1:12, nrow=3, ncol=4),patients)
patient_list
patient_list[1]
patient_list[[1]]
patient_list[1]
class(patient_list[1])
patient_list[[1]]
class(patient_list[[1]])
number1 <- 30
number2 <- 20
operator <- readline(prompt="Please enter any ARITHMETIC OPERATOR You wish!: ")
switch(operator,
"+" = print(paste("Addition of two numbers is: ", number1 + number2)),
"-" = print(paste("Subtraction of two numbers is: ", number1 - number2)),
"*" = print(paste("Multiplication of two numbers is: ", number1 * number2)),
"^" = print(paste("Exponent of two numbers is: ", number1 ^ number2)),
"/" = print(paste("Division of two numbers is: ", number1 / number2)),
"%/%" = print(paste("Integer Division of two numbers is: ", number1 %/% number2)),
"%%" = print(paste("Division of two numbers is: ", number1 %% number2)),
print("default") # Default Statement
)
operator <- readline(prompt="Please enter any ARITHMETIC OPERATOR You wish!: ")
"+" = print(paste("Addition of two numbers is: ", number1 + number2)),
operator <- readline(prompt="Please enter any ARITHMETIC OPERATOR You wish!: ")
switch(operator,
"+" = print(paste("Addition of two numbers is: ", number1 + number2)),
"-" = print(paste("Subtraction of two numbers is: ", number1 - number2)),
"*" = print(paste("Multiplication of two numbers is: ", number1 * number2)),
"^" = print(paste("Exponent of two numbers is: ", number1 ^ number2)),
"/" = print(paste("Division of two numbers is: ", number1 / number2)),
"%/%" = print(paste("Integer Division of two numbers is: ", number1 %/% number2)),
"%%" = print(paste("Division of two numbers is: ", number1 %% number2)),
print("default") # Default Statement
)
xs <- c(1, 2, 3)
for (x in xs) {
xs <- c(xs, x * 2)
}
xs
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocCheck")
library(survival)
library(tidyverse)
library(survminer)
library(JM)
# Extending Cox model examples
# Time dependent covariates -----------------------------------------------
# Stanford Heart Transplant data related to survival of patients
# on the waiting list for the Stanford heart transplant program
# jasa: original data
# jasa1: processed data in long-format
head(dplyr::select(jasa,futime,fustat,transplant,surgery,age,wait.time))
jasa$transplant <- factor(jasa$transplant)
jasa1$age<- jasa1$age + 48 # Modify age as age+48 to have the same data of jasa dataset
jasa1 %>%
arrange(id) %>%
dplyr::select(id, start,stop,event,transplant,surgery,age) %>%
head()
# Fit a (time-independent) Cox PH model for transplant, surgery and age
tind_cox <- coxph(Surv(futime, fustat) ~ transplant + surgery + age, data=jasa)
summary(tind_cox)
# Having done a transplant decreases the hazard of a factor 0.18.
# Fit a Cox model with time-dependent transplant indicator
td_cox <- coxph(Surv(start, stop, event) ~ transplant + surgery + age, data=jasa1 )
summary(td_cox)
tibble::glimpse(veteran)
veteran$trt <- ifelse(veteran$trt==1,'standard','test')
veteran$trt <- as.factor(veteran$trt)
veteran$prior <- as.factor(veteran$prior)
fit_cox <- coxph(Surv(time, status) ~ trt + prior + karno, data=veteran)
summary(fit_cox)
zp <- cox.zph(fit_cox)
plot(zp,var="karno")
zp <- cox.zph(fit_cox)
abline(h=0,col='red')
plot(zp,var="karno")
plot(abline)
plot(zp)
zp <- cox.zph(fit_cox)
plot(zp,var="karno")
abline(h=0,col='red')
plot(zp)
vet2 <- survSplit(Surv(time, status) ~ ., data= veteran, cut=c(90, 180),
episode= "tgroup", id="id")
vet2[1:7, c("id", "tstart", "time", "status", "tgroup", "age", "karno")]
head(veteran)
# The first subject died at 72 days, his data is unchanged. The second and third subjects contribute
# time to each of the three intervals.
fit_cox_step <- coxph(Surv(tstart, time, status) ~ trt + prior + karno:strata(tgroup), data=vet2)
summary(fit_cox_step)
# Notice how the fact of having multiple rows with the same unit does not alter the estimates
# should we not consider time-dependent coefficients
fit_cox_long <- coxph(Surv(tstart, time, status) ~ trt + prior + karno, data=vet2)
fit_cox_long # this is the same model as fit_cox
fit_cox
zp2<-cox.zph(fit_cox_step)
zp2
fit_cox_long <- coxph(Surv(tstart, time, status) ~ trt + prior + karno:strata(tgroup), data=vet2)
fit_cox_long # this is the same model as fit_cox
fit_cox
fit_cox_cont <- coxph(Surv(time, status) ~ trt + prior + karno + tt(karno),
data=veteran, tt = function(x, t, ...) x * log(t+1))
summary(fit_cox_cont)
fit_cox_cont <- coxph(Surv(time, status) ~ trt + prior + karno + tt(karno),
data=veteran, tt = function(x, t, ...) x * log(t+1))
summary(fit_cox_cont)
dtimes <- sort(unique(with(veteran,time[status==1])))
length(dtimes)
vet_extended <- survSplit(Surv(time,status==1)~.,veteran,cut=dtimes)
vet_extended$ttk <- vet_extended$karno * log(vet_extended$time+1)
head(vet_extended)
head(veteran)
fit_cox_cont_manual <- coxph(Surv(tstart,time,event)~trt+prior+karno+ttk,data=vet_extended)
fit_cox_cont_manual
fit_cox_cont
install.packages("frailtypack")
install.pagkages("palmerpenguins")
install.packages("palmerpenguins")
BiocManager::install("Rsamtools")
BiocManager::install("GenomicRanges")
BiocManager::install("GenomicFeatures")
y = rnorm(20,0,10)
oldpar <- par(mfrow=c(3,2))
plot(y)
plot(y)
oldpar <- par(mfrow=c(3,2))
plot(y)
oldpar <- par(mfrow=c(3,2), mar=c(4, 4, 2, 1))
plot(y)
hist(y)
plot(-y)
hist(-y)
plot(y**2)
hist(y**2)
par(oldpar)
y = rnorm(20,0,10)
pdf("myfile.pdf")
oldpar <- par(mfrow=c(3,2), mar=c(4, 4, 2, 1))
plot(y)
hist(y)
plot(-y)
hist(-y)
plot(y**2)
hist(y**2)
par(oldpar)
dev.off()
if (!require(lme4)) {
cat("The 'lme4' package is not installed.\n")
} else {
cat("The 'lme4' package is installed.\n")
}
install.packages("optparse")
BiocManager::install(NOISeq)
BiocManager::install("NOISeq")
BiocManager::install("Repitools")
setwd("/Users/ncmbianchi/Documents/2. UNI/R Studio (docs)/SCIENTIFIC PROGRAMMING/20230510")
library(devtools)
devtools::create("./distConvert2")
roxygen2::roxygenise()
setwd("/Users/ncmbianchi/Documents/2. UNI/R Studio (docs)/SCIENTIFIC PROGRAMMING/20230510/distConvert")
roxygen2::roxygenise()
setwd("/Users/ncmbianchi/Documents/2. UNI/R Studio (docs)/SCIENTIFIC PROGRAMMING/20230510/distConvert")
library(roxygen2)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(devtools)
devtools::document()
setwd("/Users/ncmbianchi/Documents/2. UNI/R Studio (docs)/SCIENTIFIC PROGRAMMING/20230510")
roxygen2::roxygenise()
current.node = as.package("distConvert")
library(devtools)
ls()
current.node = as.package("distConvert")
setwd("/Users/ncmbianchi/Documents/2-UNI/R Studio (docs)/SCIENTIFIC PROGRAMMING/20230510/Piro_s")
devtools::create("distConvert")
